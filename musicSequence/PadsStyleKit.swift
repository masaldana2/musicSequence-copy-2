//
//  PadsStyleKit.swift
//  ProjectName
//
//  Created by AuthorName on 6/15/16.
//  Copyright (c) 2016 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class PadsStyleKit : NSObject {

    //// Drawing Methods

    public class func drawCanvas1(isPressed isPressed: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations
        let pad = UIImage(named: "pad.png")!
        let padPressed = UIImage(named: "padPressed.png")!

        //// Picture Drawing
        let picturePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 147, height: 153))
        CGContextSaveGState(context)
        picturePath.addClip()
        pad.drawInRect(CGRect(x: 0, y: 0, width: pad.size.width, height: pad.size.height))
        CGContextRestoreGState(context)


        if (isPressed) {
            //// Picture 2 Drawing
            let picture2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 147, height: 153))
            CGContextSaveGState(context)
            picture2Path.addClip()
            padPressed.drawInRect(CGRect(x: 0, y: 0, width: padPressed.size.width, height: padPressed.size.height))
            CGContextRestoreGState(context)
        }
    }

    public class func drawKnob(knobValue knobValue: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let gradientColor = UIColor(red: 0.930, green: 0.930, blue: 0.930, alpha: 1.000)
        let gradientColor2 = UIColor(red: 0.680, green: 0.680, blue: 0.680, alpha: 1.000)
        let strokeColor = UIColor(red: 0.251, green: 0.228, blue: 0.228, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [gradientColor.CGColor, gradientColor.blendedColorWithFraction(0.5, ofColor: gradientColor2).CGColor, gradientColor2.CGColor], [0.82, 0.9, 0.99])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 1.1, height: 2.1)
        shadow.shadowBlurRadius = 2

        //// Variable Declarations
        let expression: CGFloat = -240 * knobValue

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: -366, y: 2, width: 147, height: 153))
        fillColor.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 6, y: 2, width: 134, height: 139))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        oval2Path.addClip()
        CGContextDrawRadialGradient(context, gradient,
            CGPoint(x: 73, y: 71.5), 0,
            CGPoint(x: 73, y: 71.5), 67.9,
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)



        //// Bezier Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 73, 71.5)
        CGContextRotateCTM(context, -(expression - 120) * CGFloat(M_PI) / 180)

        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 68.89, y: -1.67))
        bezierPath.addLineToPoint(CGPoint(x: 24.99, y: -1.72))
        strokeColor.setStroke()
        bezierPath.lineWidth = 13
        bezierPath.stroke()

        CGContextRestoreGState(context)
    }

    public class func drawSeqbutton(on on: Bool = false, selected: Bool = true) {
        //// Color Declarations
        let color4 = UIColor(red: 0.380, green: 0.000, blue: 0.512, alpha: 1.000)
        let color3 = UIColor(red: 0.855, green: 0.263, blue: 0.984, alpha: 1.000)

        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPoint(x: 6, y: 71))
        rectanglePath.addLineToPoint(CGPoint(x: 78.13, y: 71))
        rectanglePath.addLineToPoint(CGPoint(x: 78.13, y: 3.87))
        rectanglePath.addLineToPoint(CGPoint(x: 6, y: 3.87))
        rectanglePath.addLineToPoint(CGPoint(x: 6, y: 71))
        rectanglePath.closePath()
        rectanglePath.lineCapStyle = .Round;

        rectanglePath.lineJoinStyle = .Bevel;

        color3.setFill()
        rectanglePath.fill()


        if (on) {
            //// Rectangle 18 Drawing
            let rectangle18Path = UIBezierPath(rect: CGRect(x: 6, y: 4, width: 72, height: 67))
            color4.setFill()
            rectangle18Path.fill()
        }


        if (selected) {
            //// Rectangle 2 Drawing
            let rectangle2Path = UIBezierPath()
            rectangle2Path.moveToPoint(CGPoint(x: 6.37, y: 70.63))
            rectangle2Path.addLineToPoint(CGPoint(x: 78.5, y: 70.63))
            rectangle2Path.addLineToPoint(CGPoint(x: 78.5, y: 3.5))
            rectangle2Path.addLineToPoint(CGPoint(x: 6.37, y: 3.5))
            rectangle2Path.addLineToPoint(CGPoint(x: 6.37, y: 70.63))
            rectangle2Path.closePath()
            rectangle2Path.lineCapStyle = .Round;

            rectangle2Path.lineJoinStyle = .Round;

            color3.setFill()
            rectangle2Path.fill()
            UIColor.blackColor().setStroke()
            rectangle2Path.lineWidth = 3
            rectangle2Path.stroke()
        }
    }

}



extension UIColor {
    func blendedColorWithFraction(fraction: CGFloat, ofColor color: UIColor) -> UIColor {
        var r1: CGFloat = 1.0, g1: CGFloat = 1.0, b1: CGFloat = 1.0, a1: CGFloat = 1.0
        var r2: CGFloat = 1.0, g2: CGFloat = 1.0, b2: CGFloat = 1.0, a2: CGFloat = 1.0

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
